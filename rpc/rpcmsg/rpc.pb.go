// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc/rpcmsg/rpc.proto

/*
Package rpcmsg is a generated protocol buffer package.

It is generated from these files:
	rpc/rpcmsg/rpc.proto

It has these top-level messages:
	Data
*/
package rpcmsg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Data_Type int32

const (
	Data_Invalid        Data_Type = 0
	Data_Request        Data_Type = 1
	Data_Response       Data_Type = 2
	Data_Session2Server Data_Type = 3
	Data_Server2Session Data_Type = 4
	Data_Server2Server  Data_Type = 5
)

var Data_Type_name = map[int32]string{
	0: "Invalid",
	1: "Request",
	2: "Response",
	3: "Session2Server",
	4: "Server2Session",
	5: "Server2Server",
}
var Data_Type_value = map[string]int32{
	"Invalid":        0,
	"Request":        1,
	"Response":       2,
	"Session2Server": 3,
	"Server2Session": 4,
	"Server2Server":  5,
}

func (x Data_Type) String() string {
	return proto.EnumName(Data_Type_name, int32(x))
}
func (Data_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type Data struct {
	Type     Data_Type `protobuf:"varint,1,opt,name=type,enum=rpcmsg.Data_Type" json:"type,omitempty"`
	Seqid    int32     `protobuf:"varint,2,opt,name=seqid" json:"seqid,omitempty"`
	Sesid    int32     `protobuf:"varint,3,opt,name=sesid" json:"sesid,omitempty"`
	Senderid int32     `protobuf:"varint,4,opt,name=senderid" json:"senderid,omitempty"`
	Msgid    uint32    `protobuf:"varint,5,opt,name=msgid" json:"msgid,omitempty"`
	Data     []byte    `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Data) Reset()                    { *m = Data{} }
func (m *Data) String() string            { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()               {}
func (*Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Data) GetType() Data_Type {
	if m != nil {
		return m.Type
	}
	return Data_Invalid
}

func (m *Data) GetSeqid() int32 {
	if m != nil {
		return m.Seqid
	}
	return 0
}

func (m *Data) GetSesid() int32 {
	if m != nil {
		return m.Sesid
	}
	return 0
}

func (m *Data) GetSenderid() int32 {
	if m != nil {
		return m.Senderid
	}
	return 0
}

func (m *Data) GetMsgid() uint32 {
	if m != nil {
		return m.Msgid
	}
	return 0
}

func (m *Data) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*Data)(nil), "rpcmsg.Data")
	proto.RegisterEnum("rpcmsg.Data_Type", Data_Type_name, Data_Type_value)
}

func init() { proto.RegisterFile("rpc/rpcmsg/rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 236 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x3c, 0x90, 0x41, 0x6a, 0xeb, 0x30,
	0x10, 0x40, 0xbf, 0x1c, 0xd9, 0x3f, 0x4c, 0x93, 0xe0, 0x0c, 0x59, 0x88, 0xae, 0x4c, 0xa0, 0xe0,
	0x95, 0x0b, 0xee, 0x15, 0xba, 0xe9, 0x56, 0xe9, 0x05, 0xd4, 0x68, 0x08, 0x82, 0xc6, 0x56, 0x34,
	0x6a, 0x20, 0x57, 0xe8, 0xa9, 0x8b, 0xa4, 0x36, 0x2b, 0xcd, 0x7b, 0x4f, 0x42, 0x30, 0xb0, 0x0b,
	0xfe, 0xf8, 0x1c, 0xfc, 0xf1, 0xcc, 0xa7, 0x74, 0x0c, 0x3e, 0xcc, 0x71, 0xc6, 0xa6, 0x98, 0xfd,
	0x77, 0x05, 0xf2, 0xd5, 0x44, 0x83, 0x4f, 0x20, 0xe3, 0xcd, 0x93, 0x12, 0x9d, 0xe8, 0x37, 0xe3,
	0x76, 0x28, 0x7d, 0x48, 0x6d, 0x78, 0xbf, 0x79, 0xd2, 0x39, 0xe3, 0x0e, 0x6a, 0xa6, 0x8b, 0xb3,
	0xaa, 0xea, 0x44, 0x5f, 0xeb, 0x02, 0xc5, 0xb2, 0xb3, 0x6a, 0xf1, 0x67, 0xd9, 0x59, 0x7c, 0x84,
	0x25, 0xd3, 0x64, 0x29, 0x38, 0xab, 0x64, 0x0e, 0x77, 0x4e, 0x2f, 0xce, 0x7c, 0x72, 0x56, 0xd5,
	0x9d, 0xe8, 0xd7, 0xba, 0x00, 0x22, 0x48, 0x6b, 0xa2, 0x51, 0x4d, 0x27, 0xfa, 0x95, 0xce, 0xf3,
	0xde, 0x81, 0x4c, 0xff, 0xe3, 0x03, 0xfc, 0x7f, 0x9b, 0xae, 0xe6, 0xd3, 0xd9, 0xf6, 0x5f, 0x02,
	0x4d, 0x97, 0x2f, 0xe2, 0xd8, 0x0a, 0x5c, 0xc1, 0x52, 0x13, 0xfb, 0x79, 0x62, 0x6a, 0x2b, 0x44,
	0xd8, 0x1c, 0x88, 0xd9, 0xcd, 0xd3, 0x78, 0xa0, 0x70, 0xa5, 0xd0, 0x2e, 0x8a, 0x4b, 0xf3, 0xf8,
	0x9b, 0x5a, 0x89, 0x5b, 0x58, 0xdf, 0x5d, 0xbe, 0x56, 0x7f, 0x34, 0x79, 0x37, 0x2f, 0x3f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0xa9, 0x17, 0x9c, 0xe0, 0x33, 0x01, 0x00, 0x00,
}
