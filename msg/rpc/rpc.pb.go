// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc/msg/rpc.proto

/*
Package msg is a generated protocol buffer package.

It is generated from these files:
	rpc/msg/rpc.proto

It has these top-level messages:
	ReqHello
	RespHello
	ReqRPC
	RPC
	RespRPC
	RouteServerMsg
	RouteGateMsg
*/
package msg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RPC_Type int32

const (
	RPC_Invalid     RPC_Type = 0
	RPC_Request     RPC_Type = 1
	RPC_Response    RPC_Type = 2
	RPC_RouteServer RPC_Type = 3
	RPC_RouteGate   RPC_Type = 4
	RPC_Normal      RPC_Type = 5
)

var RPC_Type_name = map[int32]string{
	0: "Invalid",
	1: "Request",
	2: "Response",
	3: "RouteServer",
	4: "RouteGate",
	5: "Normal",
}
var RPC_Type_value = map[string]int32{
	"Invalid":     0,
	"Request":     1,
	"Response":    2,
	"RouteServer": 3,
	"RouteGate":   4,
	"Normal":      5,
}

func (x RPC_Type) String() string {
	return proto.EnumName(RPC_Type_name, int32(x))
}
func (RPC_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

type ReqHello struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *ReqHello) Reset()                    { *m = ReqHello{} }
func (m *ReqHello) String() string            { return proto.CompactTextString(m) }
func (*ReqHello) ProtoMessage()               {}
func (*ReqHello) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ReqHello) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type RespHello struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *RespHello) Reset()                    { *m = RespHello{} }
func (m *RespHello) String() string            { return proto.CompactTextString(m) }
func (*RespHello) ProtoMessage()               {}
func (*RespHello) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RespHello) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// rpc消息及普通send消息
type ReqRPC struct {
	Seqid int32  `protobuf:"varint,1,opt,name=seqid" json:"seqid,omitempty"`
	Msgid int32  `protobuf:"varint,2,opt,name=msgid" json:"msgid,omitempty"`
	Data  []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *ReqRPC) Reset()                    { *m = ReqRPC{} }
func (m *ReqRPC) String() string            { return proto.CompactTextString(m) }
func (*ReqRPC) ProtoMessage()               {}
func (*ReqRPC) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ReqRPC) GetSeqid() int32 {
	if m != nil {
		return m.Seqid
	}
	return 0
}

func (m *ReqRPC) GetMsgid() int32 {
	if m != nil {
		return m.Msgid
	}
	return 0
}

func (m *ReqRPC) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type RPC struct {
	Type     RPC_Type `protobuf:"varint,1,opt,name=type,enum=msg.RPC_Type" json:"type,omitempty"`
	Seqid    int32    `protobuf:"varint,2,opt,name=seqid" json:"seqid,omitempty"`
	Sesid    int32    `protobuf:"varint,3,opt,name=sesid" json:"sesid,omitempty"`
	Senderid int32    `protobuf:"varint,4,opt,name=senderid" json:"senderid,omitempty"`
	Msgid    int32    `protobuf:"varint,5,opt,name=msgid" json:"msgid,omitempty"`
	Data     []byte   `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *RPC) Reset()                    { *m = RPC{} }
func (m *RPC) String() string            { return proto.CompactTextString(m) }
func (*RPC) ProtoMessage()               {}
func (*RPC) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RPC) GetType() RPC_Type {
	if m != nil {
		return m.Type
	}
	return RPC_Invalid
}

func (m *RPC) GetSeqid() int32 {
	if m != nil {
		return m.Seqid
	}
	return 0
}

func (m *RPC) GetSesid() int32 {
	if m != nil {
		return m.Sesid
	}
	return 0
}

func (m *RPC) GetSenderid() int32 {
	if m != nil {
		return m.Senderid
	}
	return 0
}

func (m *RPC) GetMsgid() int32 {
	if m != nil {
		return m.Msgid
	}
	return 0
}

func (m *RPC) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type RespRPC struct {
	Seqid int32  `protobuf:"varint,1,opt,name=seqid" json:"seqid,omitempty"`
	Msgid int32  `protobuf:"varint,2,opt,name=msgid" json:"msgid,omitempty"`
	Data  []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *RespRPC) Reset()                    { *m = RespRPC{} }
func (m *RespRPC) String() string            { return proto.CompactTextString(m) }
func (*RespRPC) ProtoMessage()               {}
func (*RespRPC) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RespRPC) GetSeqid() int32 {
	if m != nil {
		return m.Seqid
	}
	return 0
}

func (m *RespRPC) GetMsgid() int32 {
	if m != nil {
		return m.Msgid
	}
	return 0
}

func (m *RespRPC) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// 路由到服务器消息，由gate帮忙转发到服务器
type RouteServerMsg struct {
	Sesid int32  `protobuf:"varint,1,opt,name=sesid" json:"sesid,omitempty"`
	Msgid int32  `protobuf:"varint,2,opt,name=msgid" json:"msgid,omitempty"`
	Data  []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *RouteServerMsg) Reset()                    { *m = RouteServerMsg{} }
func (m *RouteServerMsg) String() string            { return proto.CompactTextString(m) }
func (*RouteServerMsg) ProtoMessage()               {}
func (*RouteServerMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RouteServerMsg) GetSesid() int32 {
	if m != nil {
		return m.Sesid
	}
	return 0
}

func (m *RouteServerMsg) GetMsgid() int32 {
	if m != nil {
		return m.Msgid
	}
	return 0
}

func (m *RouteServerMsg) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// 路由到gate消息，由gate帮忙转发到客户端
type RouteGateMsg struct {
	Sesid int32  `protobuf:"varint,1,opt,name=sesid" json:"sesid,omitempty"`
	Msgid int32  `protobuf:"varint,2,opt,name=msgid" json:"msgid,omitempty"`
	Data  []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *RouteGateMsg) Reset()                    { *m = RouteGateMsg{} }
func (m *RouteGateMsg) String() string            { return proto.CompactTextString(m) }
func (*RouteGateMsg) ProtoMessage()               {}
func (*RouteGateMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *RouteGateMsg) GetSesid() int32 {
	if m != nil {
		return m.Sesid
	}
	return 0
}

func (m *RouteGateMsg) GetMsgid() int32 {
	if m != nil {
		return m.Msgid
	}
	return 0
}

func (m *RouteGateMsg) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*ReqHello)(nil), "msg.ReqHello")
	proto.RegisterType((*RespHello)(nil), "msg.RespHello")
	proto.RegisterType((*ReqRPC)(nil), "msg.ReqRPC")
	proto.RegisterType((*RPC)(nil), "msg.RPC")
	proto.RegisterType((*RespRPC)(nil), "msg.RespRPC")
	proto.RegisterType((*RouteServerMsg)(nil), "msg.RouteServerMsg")
	proto.RegisterType((*RouteGateMsg)(nil), "msg.RouteGateMsg")
	proto.RegisterEnum("msg.RPC_Type", RPC_Type_name, RPC_Type_value)
}

func init() { proto.RegisterFile("rpc/msg/rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 315 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x52, 0x3f, 0x6b, 0xfb, 0x30,
	0x14, 0xfc, 0x39, 0xfe, 0xf3, 0x4b, 0x5e, 0xfe, 0xd4, 0x15, 0x1d, 0x4c, 0x87, 0x36, 0xf5, 0x94,
	0xc9, 0x81, 0xf6, 0x23, 0x64, 0x68, 0x32, 0x34, 0x04, 0xb5, 0x53, 0x37, 0x37, 0x7a, 0x18, 0x83,
	0x6d, 0xc9, 0x7a, 0x4a, 0x20, 0x5f, 0xbc, 0x73, 0x91, 0x02, 0x89, 0x29, 0x2d, 0x74, 0xc8, 0xf6,
	0xee, 0x4e, 0xdc, 0x1d, 0x87, 0xe0, 0x5a, 0xab, 0xed, 0xbc, 0xa6, 0x62, 0xae, 0xd5, 0x36, 0x53,
	0x5a, 0x1a, 0xc9, 0xfc, 0x9a, 0x8a, 0xf4, 0x0e, 0xfa, 0x1c, 0xdb, 0x25, 0x56, 0x95, 0x64, 0x0c,
	0x82, 0x26, 0xaf, 0x31, 0xf1, 0xa6, 0xde, 0x6c, 0xc0, 0xdd, 0x9d, 0xde, 0xc3, 0x80, 0x23, 0xa9,
	0xdf, 0x1f, 0x2c, 0x21, 0xe2, 0xd8, 0xf2, 0xcd, 0x82, 0xdd, 0x40, 0x48, 0xd8, 0x96, 0xc2, 0xc9,
	0x21, 0x3f, 0x02, 0xcb, 0xd6, 0x54, 0x94, 0x22, 0xe9, 0x1d, 0x59, 0x07, 0xac, 0x93, 0xc8, 0x4d,
	0x9e, 0xf8, 0x53, 0x6f, 0x36, 0xe2, 0xee, 0x4e, 0x3f, 0x3d, 0xf0, 0xad, 0xcf, 0x03, 0x04, 0xe6,
	0xa0, 0x8e, 0x29, 0x93, 0xc7, 0x71, 0x56, 0x53, 0x91, 0xf1, 0xcd, 0x22, 0x7b, 0x3b, 0x28, 0xe4,
	0x4e, 0x3a, 0x47, 0xf5, 0xbe, 0x45, 0x11, 0x52, 0x29, 0x9c, 0xab, 0x63, 0xa9, 0x14, 0xec, 0x16,
	0xfa, 0x84, 0x8d, 0x40, 0x5d, 0x8a, 0x24, 0x70, 0xc2, 0x09, 0x9f, 0xcb, 0x85, 0x3f, 0x95, 0x8b,
	0x3a, 0xe5, 0xde, 0x21, 0xb0, 0xf9, 0x6c, 0x08, 0xff, 0x57, 0xcd, 0x3e, 0xaf, 0x4a, 0x11, 0xff,
	0xb3, 0x80, 0x63, 0xbb, 0x43, 0x32, 0xb1, 0xc7, 0x46, 0x76, 0x49, 0x52, 0xb2, 0x21, 0x8c, 0x7b,
	0xec, 0x0a, 0x86, 0x5c, 0xee, 0x0c, 0xbe, 0xa2, 0xde, 0xa3, 0x8e, 0x7d, 0x36, 0x86, 0x81, 0x23,
	0x9e, 0x73, 0x83, 0x71, 0xc0, 0x00, 0xa2, 0xb5, 0xd4, 0x75, 0x5e, 0xc5, 0x61, 0xba, 0xb2, 0x36,
	0xa4, 0x2e, 0xb1, 0xe1, 0x06, 0x26, 0x9d, 0xd8, 0x17, 0x2a, 0xce, 0xa3, 0x78, 0xdd, 0x51, 0xfe,
	0xee, 0xb8, 0x86, 0xd1, 0xa9, 0xf7, 0x05, 0xfc, 0x3e, 0x22, 0xf7, 0xf9, 0x9e, 0xbe, 0x02, 0x00,
	0x00, 0xff, 0xff, 0x49, 0xb5, 0x92, 0x7f, 0x91, 0x02, 0x00, 0x00,
}
